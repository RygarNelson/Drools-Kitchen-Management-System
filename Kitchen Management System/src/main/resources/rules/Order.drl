//created on: 22-mag-2019
package com.bin

//list any import classes here.
import java.util.Random;


//declare any global variables here
global Integer maxRandomTime;


rule "PrintAllOrders"

    when
        order: Order()
    then
        System.out.println("Order: "+order.toString());

end

rule "TimerExpired"
	when
		order: Order(timer.expired == true)
	then
		if(order.getPriority() == OrderPriority.HIGH){
			System.out.println("Timer of order "+order.getID()+" has been expired and the priority has already been set to "+order.getPriority());
		} else {
			order.setPriority(OrderPriority.HIGH);
			System.out.println("Timer of order "+order.getID()+" has been expired and the priority has been set to "+order.getPriority());
		}
end

rule "ChangeStatus"
	when
	
		order : Order()
	then

		Random random = new Random();
		int time = random.nextInt(maxRandomTime);
		long start = System.currentTimeMillis();
		
		//Wait
		while(System.currentTimeMillis() - start < time){
		//I do nothing
		}
		
		//Change status
		switch(order.getStatus()){
			case ORDERED:{
				order.setStatus(OrderStatus.DRINKS);
				update(order);
				break;
			}
			case DRINKS:{
				order.setStatus(OrderStatus.FIRST_COURSE);
				update(order);
				break;
			}
			case FIRST_COURSE:{
				order.setStatus(OrderStatus.SECOND_COURSE);
				update(order);
				break;
			}
			case SECOND_COURSE:{
				order.setStatus(OrderStatus.DESSERT);
				update(order);
				break;
			}
			case DESSERT:{
				order.setStatus(OrderStatus.COMPLETED);
				update(order);
				break;
			}
			case COMPLETED:{
				break;
			}
		}
end

rule "DeleteOrderOnCompletition"
	when
		order : Order(status == OrderStatus.COMPLETED)
	then
		retract(order);
end