//created on: 22-mag-2019
package com.bin

//list any import classes here.
import java.util.Random;
import java.util.concurrent.CompletableFuture;


//declare any global variables here
global Integer maxRandomTime;
global Integer highPriorityTime;
global Integer minimumRandomGeneratorTime;

rule "CalculateAverageTime"
	when
		orderAverage: OrderAverage(orderAverage > 0)
	then
		System.out.println("The average time for an order to be completed is: "+orderAverage.getOrderAverage());
		orderAverage.writeAverage();
		orderAverage.reset();
		retract(orderAverage);
end

rule "PrintAllWaiters"
	when
		waiter : Waiter()
	then
		System.out.println("Waiter: " + waiter.toString());
end

rule "TimerExpired"
	when
		order: Order(timer.expired == true)
	then
		if(order.getPriority() == OrderPriority.HIGH){
			System.out.println("Timer of order "+order.getID()+" has been expired and the priority has already been set to "+order.getPriority());
		} else {
			if(order.getStatus() != OrderStatus.COMPLETED){
				order.setPriority(OrderPriority.HIGH);
				System.out.println("Timer of order "+order.getID()+" has been expired and the priority has been set to "+order.getPriority());
			}
		}
end

rule "RemoveWaiterWhenOrderIsCompleted(LOCAL)"
	when
		waiter: Waiter(!isAvailable())
		order: Order(getWaiterID() == waiter.getWaiterID() && status == OrderStatus.COMPLETED && type == OrderType.LOCAL)
	then
		waiter.setAvailable(true);
		System.out.println("The Waiter "+waiter.getName()+" with ID "+waiter.getWaiterID()+" is now available");
		update(waiter);
end

rule "DeleteOrderOnCompletition"
	when
		order : Order(status == OrderStatus.COMPLETED)
	then
		order.getTimer().stop();
		order.WriteLog(order);
		order.storeCompleted(order);
		retract(order);
end

rule "AssignOrderToWaiter(LOCAL)"
	when
		waiter: Waiter(isAvailable())
		order: Order(getWaiterID() == waiter.getWaiterID() && status != OrderStatus.COMPLETED && type == OrderType.LOCAL)
	then
		waiter.setAvailable(false);
		System.out.println("The Waiter "+waiter.getName()+" with ID "+waiter.getWaiterID()+" is not available");
		update(waiter);
end

rule "AssignWaiterToOrder(LOCAL)"
	when
		order: Order(getWaiterID() == -1 && getStatus() != OrderStatus.COMPLETED && type == OrderType.LOCAL)
		waiter : Waiter(isAvailable())
	then
		order.setWaiterID(waiter.getWaiterID());
		System.out.println("The waiter "+waiter.getName()+" with ID "+waiter.getWaiterID()+" has been assigned to the order "+order.getID());
		update(order);
		
end

rule "PrintAllOrders"

    when
        order: Order()
    then
        System.out.println("Order: "+order.toString());

end


rule "CompleteOrder(DELIVERY,TAKEAWAY)"
	when
		order: Order(type == OrderType.DELIVERY || type == OrderType.TAKEAWAY)
	then
		Random random = new Random();
		int time = random.nextInt(maxRandomTime*3);
		order.runAsyncTaskDeliveryTakeway(time, order);
		
end

rule "ChangeStatus(LOCAL)"
	when
		//If I don't have a waiter associated to the order, I will not change his status
		order : Order(waiterID != -1 && type == OrderType.LOCAL)
	then
		Random random = new Random();
		int time = 0;
		if(order.getPriority().equals(OrderPriority.HIGH)){
			time = random.nextInt(maxRandomTime-highPriorityTime);
		} else {
			time = random.nextInt(maxRandomTime);
		}
		long start = System.currentTimeMillis();
		
		//Wait
		while(System.currentTimeMillis() - start < time){
		//I do nothing
		}
		
		//Change status
		switch(order.getStatus()){
			case ORDERED:{
				if(!(order.getDrink().getContent().equals("-"))){
					order.setStatus(OrderStatus.DRINKS);
					update(order);
					break;
				}
			}
			case DRINKS:{
				if(!(order.getStarter().getContent().equals("-"))){
					order.setStatus(OrderStatus.STARTER);
					update(order);
					break;
				}
			}
			case STARTER:{
				if(!(order.getFirstCourse().getContent().equals("-"))){
					order.setStatus(OrderStatus.FIRST_COURSE);
					update(order);
					break;
				}
			}
			case FIRST_COURSE:{
				if(!(order.getSecondCourse().getContent().equals("-"))){
					order.setStatus(OrderStatus.SECOND_COURSE);
					update(order);
					break;
				}
			}
			case SECOND_COURSE:{
				if(!(order.getDessert().getContent().equals("-"))){
					order.setStatus(OrderStatus.DESSERT);
					update(order);
					break;
				}
			}
			case DESSERT:{
				order.setStatus(OrderStatus.COMPLETED);
				update(order);
				break;
			}
			case COMPLETED:{
				break;
			}
		}
end
